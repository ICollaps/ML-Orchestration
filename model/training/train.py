# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IHP-3dtaeObtkNTAusk7aodaomzH-g4r
"""

# Native libraries
import os
import math
import operator
import mlflow
# Essential Libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime
from tqdm import tqdm
# Preprocessing
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
# Algorithms
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, SimpleRNN
from sklearn.metrics import f1_score

df_velib = pd.read_csv("data.csv")

df_velib['stationCode'] = df_velib['stationCode'].astype(str)

# option : delete minute
df_velib.drop(columns=['minute'], axis=1, inplace=True)

df_velib.head()

df_velib['flag_availability'] = df_velib["futur_availability"].apply(lambda x : 1 if x > 0.0 else 0)

df_velib.head()

df_velib.drop(columns='futur_availability', axis=1, inplace=True)

one_hot_df_velib = pd.get_dummies(df_velib, prefix={'Cluster' : 'cluster',
                                            'weekend' : 'weekend', 'jour_ferie' : 'jour_ferie'},
                                            columns=['Cluster', 'weekend', 'jour_ferie'],
                                            drop_first=False)

one_hot_df_velib.head()

one_hot_df_velib.isna().sum()

list_of_stations = one_hot_df_velib['stationCode'].unique()

"""Option 1 : Split Train & Test taking into account the stations"""

nb_stations = len(list_of_stations)
nb_training_stations = round(0.8*nb_stations)
test_stations = list_of_stations[nb_training_stations:]
X_train = one_hot_df_velib[~one_hot_df_velib['stationCode'].isin(test_stations)]
X_test = one_hot_df_velib[one_hot_df_velib['stationCode'].isin(test_stations)]
X_train.drop(columns=['stationCode'], axis=1, inplace=True)
X_test.drop(columns=['stationCode'], axis=1, inplace=True)

y_train = X_train.pop('flag_availability')
y_test = X_test.pop('flag_availability')

feature_scaler = MinMaxScaler(feature_range=(0, 1))
X_train = feature_scaler.fit_transform(X_train)
X_test = feature_scaler.fit_transform(X_test)

y_train.shape

"""Option 2 : Random split Train & Test"""

features = one_hot_df_velib.drop(columns=['stationCode'], axis=1)

target = features.pop('flag_availability')

target.shape

feature_scaler = MinMaxScaler(feature_range=(0, 1))
scaled_features = feature_scaler.fit_transform(features)
scaled_features.shape

X_train, X_test, y_train, y_test = train_test_split(
    scaled_features, target, test_size=0.2, shuffle=False
)
X_train.shape

y_train.shape

"""Model Design"""

X_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))
X_test = np.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1]))
X_train.shape

model = Sequential()
model.add(tf.keras.Input(shape=(1,X_train.shape[2])))
#model.add(layers.Bidirectional(tf.keras.layers.LSTM(units=16)))
model.add(Dense(32, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer=keras.optimizers.legacy.Adam(learning_rate=0.0001), loss=keras.losses.mean_squared_error, metrics=['accuracy'])

model.fit(X_train, y_train, epochs=3, batch_size=128, validation_split=0.2)